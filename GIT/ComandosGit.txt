pusCommandos GIT

*IMPORTANTE: Se recomienda siempre que se realice algun cambio en Git bash, chequear con ls, para asi poder ver que los cambios hayan impactado de la manera esperada.


COMANDOS BASICOS DE BASH Y MAS:

ls = Sirve para listar todos los archivos y carpetas que se encuentren dentro de un directorio.

pwd = Sirve para indicar donde estamos ubicados (carpeta donde estamos trabajando).

cd = Sirve para poder seleccionar donde movernos (ejemplo = cd workspace iriamos a la carpeta seleccionada, tambien podemos seleccion cd wokspace/ y la subcarpeta, tambien apretando tab podemos autocompletar).

cd .. = Este comando es para poder salir del directorio, y volverme un directorio hacia atras.

mkdir (nombre del archivo que se quiera crear. Ej = miweb) = Sirve para crear carpetas.

ls -a = Muestra los archivos listados, juntamente con los archivos ocultos.

rm = Eliminar archivos ejemplo: rm archvo2.txt (luego se debe realizar el commit y que tome los cambios).

git restore = Con git restore (nombre del archivo) se puede recuperar el archivo eliminado

mv = Sirve para mover archivos, y/o cambiar nombres. mv archivo1.txt archivo.txt. 

git mv = Es la manera rapida de realizar el comando mv sin necesidad de hacer commit.

gitignore = Sirve para ignorar algun archivo y/o informacion que no queramos subir a Git. Para ello debemos crear un programa dentro de VS Code u otro con nombre de extension .gitignore, y agreegar dentro los archivos/programas a ignorar. Luego se debe agregar el mismo por consola de Git Bash de la siguiente manera git add .gitignore, y luego comprometer el mismo con el siguiente comando git commit -m "agregando archivo gitignore" (entre comillas dejamos acentado el porque de nuestro commit, aunque podria ser otro el porque).



COMANDOS PARA GIT (REMOTO Y/O LOCAL):

git Init = Iniciliaza repositorios locales

git add = Agrega informacion en el stage (ver imagen). Añadidos= luego del add podemos poner . y la extension para agregar todos los archivos que contenta la misma extension declarada, o podemos seleccionar el archivo con nombre y extension, o solo poner punto para poder agregar todos los archivos dentro de la carpeta. *Para agregar mas de una carpeta se deberia escribir add archivo espacio archivos, de la siguiente manera add archivo1.txt archivo2.txt.

git status = Nos permite ver cambios que se hayan realizado, y ver que hace falta agregar al "commit", muestra el estado actual de nuestro repositorio. Añadido: -s sirve para que el status nos informe de una manera mas completa los cambios efectuados. Donde tambien nos muestra con "M" modificado, "??" que no se realizaron cambios/no ha sido agregado, "A" para agregado. En verde para los agregados (git add), y en rojo lo que aun no se agrego.

git commit -m "" = git commit -m "", git commit -m, Lo que hace este comando es comprometer el archivo contra el repositorio, entre comillas se pone el comentario que se quiera dejar como guia.

git remote = Este comando nos sirve para añadir al remoto nuestra informacion desde GitHub u otro (Ejemplo: git remote add origin https://github.com/nschurmann/miweb.git). 

git push = Palabra clave que significa empujar, ya que con este comando lo que hacemos es subir/empujar nuestra cambios e informacion hacia el Git remoto (ALMACENA LA INFORMACION EN EL SERVIDOR), y se debe ingresar de la siguiente manera (git push -u main), esto se traduce que con -u creamos la rama, con origin le indicamos donde queremos que sea creada, y main es la rama donde se va a guardar, luego pedira clave y usuario, el nombre de usuario va a ser el de GitHub, mientra que para poder obtener la clave para enlazar la informacion, debemos generar una GUI yendo a GitHub > settings > developer settings > personal access token > generate new token > aqui debemos nombrar el token, cuando expira, y el alcance del mismo, luego copiar la llave y pegar en Git Bash. Por ultimo escribir git push para que termine de impactar.

git diff = Diferencia ante el commit anterior y lo que estamos haciendo ahora. Para poder salir de la pantalla de diff debemos presionar la letra "q". Tambien ingresando diff --staged veremos los cambios dentro del stage.

git Log = Permite ver el historial. Aunque si queremos ver algo mas detallado, podemos ingresar el comando git log --oneline, el cual nos muestra el historial con el hash de nuestro commit, y el comentario que hayamos agregado a cada commit. De aqui se sale tambien con la letra "q".


RAMAS EN GIT:

git branch = Nos permite ver en que rama de nuestro repositorio estamos ubicado (antes de crear cualquier rama, es muy recomendable revisar en que rama estamos ubicados).

git checkout -b = Nos permite crear ramas dentro de nuestro repositorio, de la siguiente manera git checkout -b seguido-del-nombre-de-la-rama.

cat = Este comando nos sirve para ver el contenido del archivo deseado (ejemplo= cat archivo2.txt).

chekout =  Sirve para ir a cualquier rama que este en nuestro repositorio, saliendo de la rama actual(ejemplo= chekout main).

git merge = Sirve para poder traer informacion desde otra rama, a la rama en la cual nos encontramos situados, ingresando por ejemplo en el caso de que estemos en la rama main, y querramos traer informacion de la ramab, escribiremos "git merge ramab". Revisando los cambios con cat, escrbiendo luego el archivo el cual se deberia haber modificado, (Ejemplo: cat archivo2.txt).



git pull = palabra clave para traer la informacion almacenada en Git.

git global --config = para el mail, y el nombre de usuario, entre otros, entre ellos:
 
 git global --config user.name "WALT" = para ponerle un nombre de usuario al master / repositorio

 git global --config user.email "wjterranova@gmail.com" = para ponerle una cuenta de mail al master / repositorio

 git global --config -l = para ver la configuracion global

 git global --config 

git --help = explica lo que hace cada uno de los comandos


code . = sirve para abrir vs code desde la consola de Git.


Fuente: https://git-scm.com/docs





Correccion de error en GIT:

! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/...
Encontré una forma de "corregirlo":

git pull

git branch --set-upstream-to=origin/main main

git pull --allow-unrelated-histories

git push -u origin main

Con la cual ya se sube.


Comandos Básicos de Git

git --version (Indica la versión instalada de Git)

git init (Inicia un repositorio en el directorio donde se ejecuta el comando)

git status (Inspeccionar repositorio Git)

git add . (Añade todos los archivos que se encuentran dentro del directorio)

git add <nombre del archivo> (Añade el archivo especificado al repositorio de Git)

git rm --cached <nombre del archivo> (Deja de monitorear o de hacer el seguimiento a 
dicho archivo)

git commit -m "<comentario>" (Permite especificar, a modo de comentario, los cambios realizados en el arhivo o proyecto)

git config --global user.name "<nombre del usuario que está realizando los cambios>" (Para todos los proyectos que se relizarán)

git config --global user.email "<email del usuario que está realizando los cambios>" (Para todos los proyectos que se relizarán)

git config --local user.name "<nombre del usuario que está realizando los cambios>" (Solo para el proyeto actual)

git config --local user.email "<email del usuario que está realizando los cambios>" (Solo para el proyecto actual)

git log (Visualiza el historial de commits en varias líneas)

git log --oneline (Visualiza el historial de commits en una sola línea)

git log -p (Visualiza el historial de commits junto con los detalles de los cambios realizados en el código. Para salir de los detalles escribir :q)

git config user.name (Devuelve el nombre de la persona que realizó el commit)

git config user.email (Devuelve el correo de la persona que realizó el commit)

git init --bare (Crea un repositorio que no tendrá la working tree, o sea, no contendrá una copia de nuestros archivos. Como el repositorio servirá solo como servidor, para que otros miembros del equipo sincronicen sus trabajos, disminuimos espacio de almacenamiento de esta forma)

git remote (Muestra un listado de los repositorios remotos)

git remote add <escribir un nombre para el servidor local> <dirección del servidor remoto> (Permite agregar un servidor remoto a un servidor local. De esta forma tendremos un link de nuestro repositorio local con el repositorio remoto)

git remote -v (Indica si el servidor local está apuntando hacia el servidor remoto)

git clone <dirección del repositorio> <nombre que deseo colocar al repositorio clonado> (Permite clonar un repositorio)

git push <nombre del servidor> <nombre del branch> (Publica nuestro branch del proyecto en el servidor local)

git remote rename <nombre actual del repositorio remoto> <nombre por el que se desea cambiar> (Permite cambiar el nombre de un repositorio)

git pull <nombre del servidor> <nombre del branch> (Copia el branch del proyecto publicado en el servidor)

git branch (Lista todas las branches o ramas del proyecto)

git branch <nombre del branch> (Permite crear una branch o rama del proyecto)

git checkout <nombre del branch> (Nos lleva hacia la branch o rama especificada)

git checkout -b <nombre del branch> (Crea una branch y nos lleva hacia ella)

git merge <nombre del branch> (Agrega los cambios realizados en el branch especificado a la rama del proyecto desde donde se ejecuta el comando)

git rebase <nombre del branch> (Agrega los cambios realizados en el branch especificado a la rama del proyecto desde donde se ejecuta el comando. Los commits de los cambios realizados en el branch se escribirán antes del último commit realizado en el proyecto. Este es un proceso lineal de merge)

git log --graph (Permite visualizar de forma gráfica los commits realizados)

git restore <nombre del archivo> (Deshace una modificación que aún no fue agregada al index o stage, o sea, antes de hacer git add)

git restore --staged <nombre del archivo> (Deshace una modificación después de agregarla, pero antes de commitearla)

git revert <id del commit al cual queremos regresar> (Deshace una modificación después de realizar el commit)

git stash (Almacena temporalmente las modificaciones que se realice al proyecto)

git stash list (Permite visualizar una lista de los cambios realizados en el stash)

git stash drop <número> (Elimina un elemento determinado del stash)

git stash pop (Aplica y elimina el último cambio que se agregó al stash)

git diff (Permite visualizar las modificaciones realizadas en determinado código)

git diff <hash inicio>..<hash de fin> (Muestra los cambios realizados desde el commit de inicio al commit de fin)

git tag -a <nombre de la etiqueta ejemplo: v0.1.0> (Genera una release del programa)





